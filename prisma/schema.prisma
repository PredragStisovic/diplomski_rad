// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email        String
  password     String
  dateOfBirth  DateTime @map("date_of_birth")
  refreshToken String?  @map("refresh_token")
  role         RoleEnum

  Wishlist      Wishlist[]
  RecordReviews RecordReview[]
  Orders        Order[]

  @@map("users")
}

model Record {
  id Int @id @default(autoincrement())

  name        String
  artist      String
  price       Float
  description String
  format      String
  genre       String

  Wishlist      Wishlist[]
  RecordReviews RecordReview[]
  RecordFiles   RecordFile[]
  OrderItems    OrderItem[]

  @@map("records")
}

model Wishlist {
  User   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  Record   Record @relation(fields: [recordId], references: [id])
  recordId Int    @map("record_id")

  @@unique([userId, recordId])
  @@map("wishlists")
}

model RecordReview {
  reviewId Int @id @default(autoincrement())

  User   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  Record   Record @relation(fields: [recordId], references: [id])
  recordId Int    @map("record_id")

  comment   String?
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("record_reviews")
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  mimeType String @map("mime_type")
  size     Int

  RecordFiles RecordFile[]

  @@map("files")
}

model RecordFile {
  File   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String @map("file_id")

  Record   Record @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int    @map("record_id")

  @@unique([fileId, recordId])
  @@map("record_files")
}

model Order {
  id Int @id @default(autoincrement())

  totalAmount Float      @map("total_amount")
  status      StatusEnum

  city         String
  postalCode   Int    @map("postal_code")
  street       String
  streetNumber String @map("street_number")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  OrderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  Record   Record @relation(fields: [recordId], references: [id])
  recordId Int    @map("record_id")

  Order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @map("order_id")

  unitPrice Float @map("unit_price")
  quantity  Int

  @@unique([recordId, orderId])
  @@map("order_items")
}

enum RoleEnum {
  Admin
  Customer
  Worker
}

enum StatusEnum {
  Pending
  OnHold
  Processing
  Shipped
  InTransit
  Completed
}
